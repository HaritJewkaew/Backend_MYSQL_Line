นี้ยังงงการใช้โค้ดหลายๆอันอยู่ส่วนใหญ่เห็นมีtypescriptด้วย เเต่เเปลงจากPHPเป็น json ได้บางส่วนละเเต่ยังงงๆโค้ดอยู่เเต่ก็น่าจะมีผิดเยอะอยู่ 
ถ้าจะดึงโค้ดไปลองก็สร้างไฟล์ใหม่เป็น .json ไม่ก็เปลี่ยนชื่อไฟล์นี้ 
โค้ดมาจาก git ตัวนี้ https://github.com/line/line-bot-sdk-php 
webhook -> src -> lib 

----------------------------------------------------------------------------------------------
//Webhook_Dummy 

const axios = require('axios');
const FormData = require('form-data');

class DummyApi {
    constructor() {
        this.client = axios.create();
        this.hostIndex = 0;
    }

    setHostIndex(hostIndex) {
        this.hostIndex = hostIndex;
    }

    async callback(callbackRequest, contentType = 'application/json') {
        const { data } = await this.callbackWithHttpInfo(callbackRequest, contentType);
        return data;
    }

    async callbackWithHttpInfo(callbackRequest, contentType = 'application/json') {
        const request = this.callbackRequest(callbackRequest, contentType);

        try {
            const response = await this.client.request(request);
            return [response.data, response.status, response.headers];
        } catch (error) {
            if (error.response) {
                throw new Error(`[${error.response.status}] ${error.response.data}`);
            } else {
                throw error;
            }
        }
    }

    callbackRequest(callbackRequest, contentType) {
        const resourcePath = '/callback';
        const headers = {
            'Content-Type': contentType
        };
        const httpBody = contentType === 'application/json'
            ? JSON.stringify(callbackRequest)
            : callbackRequest;

        return {
            method: 'post',
            url: this.hostIndex + resourcePath,
            headers,
            data: httpBody
        };
    }
}

// Example usage
const api = new DummyApi();
api.callback({ key: 'value' })
    .then(response => console.log(response))
    .catch(error => console.error(error));

----------------------------------------------------------------------
//AccountLinkEvent

/**
 * AccountLinkEvent
 *
 * @category Class
 * @description Event object for when a user has linked their LINE account with a provider's service account. You can reply to account link events.
 * @package  LINE\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

interface LinkContent {
    // Define the structure of LinkContent here
}

class AccountLinkEvent {
    public replyToken: string;
    public link: LinkContent;

    constructor(data: any = {}) {
        this.replyToken = data['replyToken'] || '';
        this.link = data['link'] || {};
    }

    public static attributeMap() {
        return {
            'replyToken': 'replyToken',
            'link': 'link'
        };
    }

    public static setters() {
        return {
            'replyToken': 'setReplyToken',
            'link': 'setLink'
        };
    }

    public static getters() {
        return {
            'replyToken': 'getReplyToken',
            'link': 'getLink'
        };
    }

    public getModelName() {
        return 'AccountLinkEvent';
    }

    public listInvalidProperties() {
        let invalidProperties: string[] = [];

        if (this.link === null) {
            invalidProperties.push("'link' can't be null");
        }

        return invalidProperties;
    }

    public valid() {
        return this.listInvalidProperties().length === 0;
    }

    public getReplyToken() {
        return this.replyToken;
    }

    public setReplyToken(replyToken: string) {
        if (replyToken === null) {
            throw new Error('non-nullable replyToken cannot be null');
        }
        this.replyToken = replyToken;
    }

    public getLink() {
        return this.link;
    }

    public setLink(link: LinkContent) {
        if (link === null) {
            throw new Error('non-nullable link cannot be null');
        }
        this.link = link;
    }

    public offsetExists(offset: number) {
        return this[offset] !== undefined;
    }

    public offsetGet(offset: number) {
        return this[offset];
    }

    public offsetSet(offset: number, value: any) {
        this[offset] = value;
    }

    public offsetUnset(offset: number) {
        delete this[offset];
    }

    public jsonSerialize() {
        return this;
    }

    public __toString() {
        return JSON.stringify(this, null, 2);
    }

    public toHeaderValue() {
        return JSON.stringify(this);
    }
}

// Example usage
const accountLinkEvent = new AccountLinkEvent({
    replyToken: 'token',
    link: { /* link content here */ }
});
console.log(accountLinkEvent.toJSON());

-----------------------------------------------------------------------------------------
//CallbackRequest อันนี้น่าจะเอามาใช้ทำปุ่มกดได้ เเต่ยังงงๆอยู่
 
/**
 * CallbackRequest
 *
 * @category Class
 * @description The request body contains a JSON object with the user ID of a bot that should receive webhook events and an array of webhook event objects.
 * @package  LINE\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

interface Event {
    // Define the structure of Event here
}

class CallbackRequest {
    public destination: string;
    public events: Event[];

    constructor(data: any = {}) {
        this.destination = data['destination'] || '';
        this.events = data['events'] || [];
    }

    public static attributeMap() {
        return {
            'destination': 'destination',
            'events': 'events'
        };
    }

    public static setters() {
        return {
            'destination': 'setDestination',
            'events': 'setEvents'
        };
    }

    public static getters() {
        return {
            'destination': 'getDestination',
            'events': 'getEvents'
        };
    }

    public getModelName() {
        return 'CallbackRequest';
    }

    public listInvalidProperties() {
        let invalidProperties: string[] = [];

        if (this.destination === null) {
            invalidProperties.push("'destination' can't be null");
        }
        if ((this.destination.length > 33)) {
            invalidProperties.push("invalid value for 'destination', the character length must be smaller than or equal to 33.");
        }

        if ((this.destination.length < 33)) {
            invalidProperties.push("invalid value for 'destination', the character length must be bigger than or equal to 33.");
        }

        if (!/^U[0-9a-f]{32}$/.test(this.destination)) {
            invalidProperties.push("invalid value for 'destination', must be conform to the pattern /^U[0-9a-f]{32}$/.");
        }

        if (this.events === null) {
            invalidProperties.push("'events' can't be null");
        }
        return invalidProperties;
    }

    public valid() {
        return this.listInvalidProperties().length === 0;
    }

    public getDestination() {
        return this.destination;
    }

    public setDestination(destination: string) {
        if (destination === null) {
            throw new Error('non-nullable destination cannot be null');
        }
        if ((destination.length > 33)) {
            throw new Error('invalid length for destination when calling CallbackRequest., must be smaller than or equal to 33.');
        }
        if ((destination.length < 33)) {
            throw new Error('invalid length for destination when calling CallbackRequest., must be bigger than or equal to 33.');
        }
        if ((!/^U[0-9a-f]{32}$/.test(destination))) {
            throw new Error("invalid value for destination when calling CallbackRequest., must conform to the pattern /^U[0-9a-f]{32}$/.");
        }

        this.destination = destination;
    }

    public getEvents() {
        return this.events;
    }

    public setEvents(events: Event[]) {
        if (events === null) {
            throw new Error('non-nullable events cannot be null');
        }
        this.events = events;
    }

    public offsetExists(offset: number) {
        return this[offset] !== undefined;
    }

    public offsetGet(offset: number) {
        return this[offset];
    }

    public offsetSet(offset: number, value: any) {
        this[offset] = value;
    }

    public offsetUnset(offset: number) {
        delete this[offset];
    }

    public jsonSerialize() {
        return this;
    }

    public __toString() {
        return JSON.stringify(this, null, 2);
    }

    public toHeaderValue() {
        return JSON.stringify(this);
    }
}

// Example usage
const callbackRequest = new CallbackRequest({
    destination: 'U1234567890123456789012345678901',
    events: [/* array of events */]
});
console.log(callbackRequest.toJSON());


---------------------------------------------------------------------------------------
//PostBackEvent อันนี้ก็น่าจะใช้ได้

/**
 * PostbackEvent
 *
 * @category Class
 * @description Event object for when a user performs a postback action which initiates a postback. You can reply to postback events.
 * @package  LINE\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

import { Event } from './Event';

export interface PostbackContent {
    // Define the structure of PostbackContent here
}

export class PostbackEvent extends Event {
    public replyToken: string | null;
    public postback: PostbackContent;

    constructor(data: any = {}) {
        super(data);

        this.replyToken = data['replyToken'] || null;
        this.postback = data['postback'] || {};
    }

    public static attributeMap() {
        return {
            'replyToken': 'replyToken',
            'postback': 'postback'
        };
    }

    public static setters() {
        return {
            'replyToken': 'setReplyToken',
            'postback': 'setPostback'
        };
    }

    public static getters() {
        return {
            'replyToken': 'getReplyToken',
            'postback': 'getPostback'
        };
    }

    public getModelName() {
        return 'PostbackEvent';
    }

    public listInvalidProperties() {
        let invalidProperties: string[] = [];

        if (this.postback === null) {
            invalidProperties.push("'postback' can't be null");
        }
        return invalidProperties;
    }

    public valid() {
        return this.listInvalidProperties().length === 0;
    }

    public getReplyToken() {
        return this.replyToken;
    }

    public setReplyToken(replyToken: string | null) {
        this.replyToken = replyToken;
    }

    public getPostback() {
        return this.postback;
    }

    public setPostback(postback: PostbackContent) {
        this.postback = postback;
    }

    public offsetExists(offset: number) {
        return this[offset] !== undefined;
    }

    public offsetGet(offset: number) {
        return this[offset];
    }

    public offsetSet(offset: number, value: any) {
        this[offset] = value;
    }

    public offsetUnset(offset: number) {
        delete this[offset];
    }

    public jsonSerialize() {
        return this;
    }

    public __toString() {
        return JSON.stringify(this, null, 2);
    }

    public toHeaderValue() {
        return JSON.stringify(this);
    }
}

// Example usage
const postbackEvent = new PostbackEvent({
    replyToken: 'replyTokenValue',
    postback: {/* PostbackContent object */}
});
console.log(postbackEvent.toJSON());



